openapi: "3.0.0"
info: 
  version: "1.0.0"
  title: ssuckServer API
  description: "ssuckmate server API 입니다. 토큰은 헤더에 키를 'token' 으로 설정해 넣으세요"

servers: 
  - url: http://localhost:3000/v4
    description: Local Server
  - url: http://3.112.201.89:3000/v4
    description: dev Server
paths:
  /sagam:
    get:
      tags:
        - sagam
      summary: "사감 자신의 정보"
      responses:
        '200': 
          description: "사감의 정보를 받아왔습니다.."
          content:
            $ref: '#contents/sagam'
  /sagam/auth/join:
    post:
      tags:
        - "auth"
      summary: "Create for sagam"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: "New sagam is created"
          content:
            $ref: '#contents/postResponseContent'
        '409':
          description: "duplicated email"
          content:
            $ref: '#contents/postResponseContent'
  /sagam/auth/login:
    post:
      tags:
        - "auth"
      summary: "Login for sagam"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
      responses:
        '200':
          description: "Sucessfully logined"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: "Invaild email or password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /sagam/dormitory:
    get:
      tags:
        - dormitory
      responses: 
        '200':
          description: 조회 성공
          content:
            $ref: "#contents/dormitory"
  /sagam/dormitory/add:
    post:
      tags:
        - "dormitory"
      summary: "Add dormitory related to sagam (identifier is dormitory's password)"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                identifier:
                  type: string
      responses:
        '201':
          description: "New dormitory is created"
          content:
            $ref: '#contents/postResponseContent'
        '409':
          description: "duplicated name"
          content:
            $ref: '#contents/postResponseContent'
  /sagam/dormitory/join:
    post:
      tags:
        - "dormitory"
      summary: "Join existing dormitory related to sagam"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                identifier:
                  type: string
      responses:
        '201':
          description: "Joined sucessfully"
          content:
            $ref: '#contents/postResponseContent'
        '400':
          description: "Incorrect name or identifier"
          content:
            $ref: '#contents/postResponseContent'
  /sagam/parcel/add:
    post:
      tags:
        - "parcel"
      summary: "Add parcel"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender: 
                  type: string
                status:
                  type: string
                  enum:
                    - 보관중
                    - 비었음
                    - 분실
                recipient:
                  type: integer
                dormitory:
                  type: integer
      responses:
        '201':
          description: "New parcel is added"
          content:
            $ref: '#contents/postResponseContent'
  /sagam/point/add:
    post:
      tags:
        - point
      summary: Add point
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                amount:
                  type: integer
                type:
                  type: string
                  enum:
                    - 상점
                    - 벌점
                reason:
                  type: string
      responses:
        '201':
          description: New Point is added
          content:
            $ref: '#contents/postResponseContent'
  /sagam/point:
    get: 
      tags:
        - point
      summary: get points of dormitory
      responses:
        200:
          description: 기숙사의 상/벌점 정보를 받아옴
          content:
            $ref: '#contents/pointArray'
  /sagam/point/updateAmount:
    put: 
      tags:
        - point
      summary: 상/벌점 점수를 수정합니다.
      requestBody:
        required: true
        description: 포인트의 id와 수정하고싶은 점수를 넣으세요
        content: 
          application/json:
            schema:
              type: object
              properties:
                point:
                  type: integer
                amount:
                  type: integer
      responses:
        200:
          description: 상/벌점 수정 완료
          content:
            $ref: '#contents/putResponseContent'      
  /sagam/point/delete:
    delete:
      tags:
        - point
      summary: 상/벌점 점수를 삭제합니다.
      parameters:
        - in: path
          name: point
          schema: 
            type: integer
          required: true
          description: 삭제할 포인트의 id를 넣으세요.
      responses:
        200:
          description: 상/벌점 삭제 완료
          contents:
            $ref: '#contents/deleteResponseContent'
  /sagam/user/userInfo:
    get:
      tags:
        - "sagam"
      summary: "유저의 id를 넘기고 정보를 받아옴"
      parameters:
        - in: path
          name: user
          schema:
            type: integer
          required: true
          description: 유저 id를 넘기세요
      responses:
        '200': 
          description: "유저 정보를 받아옴."
          content:
            $ref: '#contents/user'
  /sagam/user/list:
    get:
      tags:
        - "sagam"
      summary: "기숙사의 전체 리스트 받아오기"
      description: "승인대기중인 놈들도 받아온다"
      responses:
        '200': 
          description: "기숙사의 유저 리스트를 받아왔습니다."
          content:
            $ref: '#contents/userArray'
  /sagam/user/notAuthed:
    get:
      tags:
        - sagam
      summary: "해당 기숙사에 가입 신청한 유저 리스트"
      responses:
        200:
          description: "승인 대기중 유저 리스트를 받아왔습니다."
          content:
            $ref: '#contents/userArray'
  /sagem/room/:
    get:
      tags:
        - room
      summary: 기숙사의 전체 호실
      responses:
        '200': 
          description: 기숙사 전체 호실 받아왔습니다.
          content:
            $ref: "#contents/roomArray"
  /sagem/room/add:
    post:
      tags:
        - room
      summary: 방을 추가합니다.
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                floor: 
                  type: integer
      responses:
        201:
          description: 방 추가 완료
          content: 
            $ref: "#contents/postResponseContent"
  /sagam/room/updateUser:
    put:
      tags:
        - room
      summary: 유저의 room을 변경합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId: 
                  type: integer
                userId: 
                  type: integer
      responses:
        200:
          description: "성공"
          content:
              $ref: "#contents/putResponseContent"
  /sagam/room/getRoomsByFloor:
    get:
      tags:
        - room
      summary: 해당 층에 있는 room 목록을 가져옵니다.
      parameters:
        - in : path
          name: floor
          schema:
            type: integer
          required: true
          description: 조회하고 싶은 층수를 넣으세요.
          
      responses:
        200:
          description: 해당 층의 방 목록
          content:
            $ref: "#contents/roomArray"
  /sagam/room/users:
    get:
      tags:
        - room
      summary: 호실에 있는 유저 목록을 가져옵니다.
      parameters:
        - in : path
          name: roomId
          schema:
            type: integer
          required: true
          description: 룸 id를 query로 보내면 유저 목록을 받습니다.

      responses:
        200:
          description: 호실의 유저 목록
          content:
            $ref: "#contents/userArray"
  /sagam/room/delete:
    delete: 
      tags:
        - room
      summary: 방 삭제
      parameters:
        - in: path
          name: room
          schema:
            type: integer
          required: true
          description: 삭제할 방 id
      responses:
        200:
          description: "방 삭제 완료."
          content:
            $ref: "#contents/deleteResponseContent"
  /sagam/washer/add:
    post:
      tags:
        - washer
      summary: 세탁기를 추가합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                floor:
                  type: integer
      responses:
        201:
          description: "세탁기 추가 완료."
          content:
            $ref: "#contents/postResponseContent"
  /sagam/washer/delete:
    delete:
      tags:
        - washer
      summary: 세탁기를 제거합니다.
      parameters:
        - in: path
          name: washer
          schema:
            type: integer
          required: true
          description: 삭제할 세탁기 id
      responses:
        200:
          description: 세탁기 제거 완료
          content:
            $ref: "#contents/deleteResponseContent"
    /sagam/dryer/add:
    post:
      tags:
        - dryer
      summary: 건조기 추가합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                floor:
                  type: integer
      responses:
        201:
          description: "세탁기 추가 완료."
          content:
            $ref: "#contents/postResponseContent"
  /sagam/dryer/delete:
    delete:
      tags:
        - dryer
      summary: 건조기 제거합니다.
      parameters:
        - in: path
          name: dryer
          schema:
            type: integer
          required: true
          description: 삭제할 건조기 id
      responses:
        200:
          description: 건조기 제거 완료
          content:
            $ref: "#contents/deleteResponseContent"
  /sagam/notice/:
    get:
      tags:
        - notice
      summary: "공지사항 받아오기"
      responses:
        '200' :
          description: "공지사항 목록을 받아옵니다."
          content:
            $ref: "#contents/noticeArray"
  /sagam/notice/add:
    post:
      tags:
        - notice
      summary: "공지사항 작성"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: string
      responses:
        '200' :
          description: "공지를 추가했습니다."
          content:
            $ref: "#contents/postResponseContent"
  /sagam/notice/delete:
    delete:
      tags:
        - notice
      summary: "공지사항 삭제"
      parameters:
        - in: path
          notice:
          schema:
            type:
              integer
          required: true
          description: 삭제할 공지사항 id를 넣으세요.
      responses:
        '200' :
          description: "공지를 삭제했습니다.."
          content:
            $ref: "#contents/deleteResponseContent"

            /user/dryer/floor:
  /user:
    get:
      tags:
        - user
      summary: "유저 자신의 정보"
      responses:
        '200': 
          description: "유저의 정보를 받아왔습니다.."
          content:
            $ref: '#contents/user'
  /user/auth/join:
    post:
      tags:
        - auth
      summary: Create a student
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
                name:
                  type: string
                phoneNum:
                  type: string
                dormitoryCode:
                  type: integer
      responses:
        '201':
          description: "New user is created"
          content:
            $ref: '#contents/postResponseContent'
        '409':
          description: "duplicated email"
          content:
            $ref: '#contents/postResponseContent'
  /user/auth/login:
    post:
      tags:
        - "auth"
      summary: "Login for student"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
      responses:
        '200':
          description: "Sucessfully logined"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: "Invaild email or password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  user/washer:
    get:
      tags:
        - dryer
      summary: 모든 층에 있는 건조기 리스트 불러오기.
      responses:
        200:
          description: 모든 층 건조기 다 불러옴
          content:
            $ref: '#contents/dryerArray'
  /user/dormitory:
    get:
      tags:
        - dormitory
      summary: 유저의 기숙사 정보를 불러옵니다.
      responses:
        200:
          description: 기숙사 정보
          content:
            $ref: '#contents/dormitory'
  /user/dryer/floor:
    get:
      tags:
        - dryer
      summary: 특정 층에 있는 건조기 리스트 불러오기.
      parameters:
        - in: path
          name: floor
          schema:
            type: integer
          required: true
          description: 조회하고 싶은 층수를 넣으세요.
      responses:
        200:
          description: 특정 층 건조기 다 불러옴
          content:
            $ref: '#contents/dryerArray'
  /user/dryer/changeStatus:
    put:
      tags:
        - 건조기
      summary: 상태를 사용중, 비었음 중 하나로 변경하고 occupant 업데이트
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                washerId:
                  type: integer
                status:
                  type: string
                  enum:
                    - 사용중
                    - 비었음
                endTime: 
                  type: string
                  example: "2021-08-09 07:42:28"
      responses:
        200:
          description: "상태 변경 완료"
          content: 
            $ref: "#contents/dryer"
  /user/notice/:
    get:
      tags:
        - notice
      summary: "공지사항 받아오기"
      responses:
        '200' :
          description: "공지사항 목록을 받아옵니다."
          content:
            $ref: "#contents/noticeArray"
  /user/parcel/myParcels:
    get:
      tags:
        - "parcel"
      summary: "Load my parcels"
      responses:
        '200':
          description: "Display parcel list"
          content:
            $ref: '#contents/parcelArray'
  /user/parcel/changeStatus:
    put:
      tags:
        - "parcel"
      summary: "parcel상태를 찾아감,보관중,분실 중 하나로 설정"
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                status:
                  type: string
      responses:
        '201':
          description: "Parcel 상태 변경 완료"
          content:
            $ref: '#contents/putResponseContent'
  /user/parcel/delete:
    delete:
      tags:
        - "parcel"
      summary: "delete parcel"
      parameters:
        - in: path
          name: parcel
          schema:
            type: integer
          required: true
          description: 삭제할 택배 id
      responses:
        '201':
          description: "Parcel 삭제 완료"
          content:
            $ref: '#contents/deleteResponseContent'
  /user/point:
    get:
      tags:
        - point
      summary: 자신의 상벌점을 조회합니다.
      responses:
        200:
          content:
            $ref: '#contents/pointArray'
  /user/room/floor:
    get:
      tags:
        - room
      summary: 본인 방이 몇 층에 있는지 나타냅니다.
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  floor:
                    type: integer
                    example: 1
  /user/washer:
    get:
      tags:
        - washer
      summary: 모든 층에 있는 세탁기 리스트 불러오기.
      responses:
        200:
          description: 모든 층 세탁기 다 불러옴
          content:
            $ref: '#contents/washerArray'

  /user/washer/floor:
    get:
      tags:
        - washer
      summary: 특정 층에 있는 세탁기 리스트 불러오기.
      parameters:
        - in: path
          name: floor
          schema:
            type: integer
          required: true
          description: 조회하고 싶은 층수를 넣으세요.
      responses:
        200:
          description: 특정 층 세탁기 다 불러옴
          content:
            $ref: '#contents/washerArray'
  /user/washer/changeStatus:
    put:
      tags:
        - washer
      summary: 상태를 사용중, 비었음 중 하나로 변경하고 occupant 업데이트
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                washerId:
                  type: integer
                status:
                  type: string
                  enum:
                    - 사용중
                    - 비었음
                endTime: 
                  type: string
                  example: "2021-08-09 07:42:28"
      responses:
        200:
          description: "상태 변경 완료"
          content: 
            $ref: "#contents/washer"
contents:
  putResponseContent:
    application/json:
      schema:
        type: object
        properties:
          message:
            type: string
  deleteResponseContent:
    application/json:
      schema:
        type: object
        properties:
          message:
            type: string
  postResponseContent:
    application/json:
      schema:
        type: object
        properties:
          message:
            type: string
  dormitory:
    application/json:
      schema:
        $ref: "#schemas/dormitory"
  dryer:
    application/json:
      schema:
        $ref: "#schemas/dryer"
  noticeArray:
    application/json:
      schema:
        $ref: '#schemas/noticeArray'
  notice:
    application/json:
      schema:
        $ref: '#schemas/notice'
  parcelArray:
    application/json:
      schema:
        $ref: '#schemas/parcelArray'
  parcel: 
    application/json:
      schema:
        $ref: '#schemas/parcel'
  pointArray:
    application/json:
      schema:
        $ref: '#schemas/pointArray'
  point:
    application/json:
      schema:
        $ref: '#schemas/point'
  sagamArray:
    application/json:
      schema:
        $ref: '#schemas/sagamArray'
  sagam:
    application/json:
      schema:
        $ref: '#schemas/sagam'
  userArray:
    application/json:
      schema:
        $ref: '#schemas/userArray'
  user:
    application/json:
      schema:
        $ref: '#schemas/user'
  washerArray:
    application/json:
      schema:
        $ref: '#schemas/washerArray'
  washer:
    application/json:
      schema:
        $ref: '#schemas/washer'
  roomArray:
    application/json:
      schema:
        $ref: '#schemas/roomArray'
  room:
    application/json:
      schema:
        $ref: '#schemas/room'
schemas:
  dormitory: 
    type: object
    properties: 
      id:
        type: integer
        example: 1
      name:
        type: string
        example: 한양숙사
      story: 
        type: integer
        example: 3
      dormitoryCode:
        type: string
        example: hanyang123
  dryerArray:
    type: array
    items:
      $ref: "#schemas/dryer"
  dryer:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: string
        enum:
          - 비었음
          - 사용중
      occupant:
        type: integer
        example: 1
      endtime: 
        type: string
        example: "2016-08-09 07:42:28"
      dormitory:
        type: intege
        example: 1
  
  notice:
    type: object
    properties:
      id:
        type: integer
        example: 1
      contents:
        type: string
        example: 시끄러 떠들지마
      sagam:
        type: integer
        example: 1
  
  noticeArray:
    type: array
    items:
      $ref: '#schemas/notice'

  userArray:
    type: array
    items:
      $ref: "#schemas/user"
  user:
    type: object
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        format: email
        example: mail@mail.com
      password:
        type: string
        example: sf23#$@$1f
      name:
        type: string
        example: userName
      phoneNum:
        type: integer
        example: 01012341234
      provider:
        type: string
        example: local
      snsId:
        type: string
      isAuthed:
        type: boolean
      penalty:
        type: integer
        example: 5
      advantage:
        type: integer
        example: 5
      room:
        type: integer
        example: 401
      dormitory:
        type: integer
        example: 1
  sagamArray:
    type: array
    items:
      $ref: "#schemas/sagam"
  sagam:
    type: object
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        format: email
        example: mail@mail.com
      password:
        type: string
        example: sf23#$@$1f
      name:
        type: string
        example: userName
      dormitory:
        type: integer
        example: 1
  parcelArray:
    type: array
    items:
      $ref: "#schemas/parcel"
  parcel:
    type: object
    properties:
      id:
        type: integer
        example: 1
      sender:
        type: string
        example: 김현수
      status:
        type: string
        enum:
          - 찾아감
          - 보관중
          - 분실됨
      taker:
        type: string
        example: userName
      advantage:
        type: integer
        example: 5
      room:
        type: integer
        example: 401
      dormitory:
        type: integer
        example: 1
      createdAt:
        type: string
        example: "2021-01-20T07:53:25.000Z"
  pointArray:
    type: array
    items:
      $ref: "#schemas/point"
  point:
    type: object
    properties:
      id:
        type: integer
        example: 1
      type:
        type: string
        enum:
          - 상점
          - 벌점
      amount:
        type: integer
        example: 5
      reason:
        type: string
        example: 깔끔하게 잘 지냄
      user:
        type: integer
        example: 1
      createdAt:
        type: string
        example: "2021-01-20T07:53:25.000Z"
  washerArray:
    type: array
    items:
      $ref: "#schemas/washer"
  washer:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: string
        enum:
          - 비었음
          - 사용중
      occupant:
        type: integer
        example: 1
      endtime: 
        type: string
        example: "2016-08-09 07:42:28"
      dormitory:
        type: intege
        example: 1
  roomArray:
    type: array
    items:
      $ref: "#schemas/room"
  room:
    type: object
    properties:
      id:
        type: integer
        example: 1
      roomNum: 
        type: integer
        example: 1
      floor: 
        type: integer
        example: 1
      dormitory:
        type: integer
        example: 1